version: '3.8'

# Docker Compose pour Raspberry Pi - Production
# Utilise les images pré-buildées depuis GitHub Container Registry
# Auto-update via Watchtower

services:
  # SQL Server for ARM64 (Azure SQL Edge)
  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    container_name: elibrary-sqlserver
    platform: linux/arm64
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    restart: unless-stopped
    networks:
      - elibrary-network
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${DB_PASSWORD}", "-Q", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: elibrary-redis
    platform: linux/arm64
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - elibrary-network
    command: redis-server --appendonly yes

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: elibrary-rabbitmq
    platform: linux/arm64
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - elibrary-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Gateway Service (pré-buildé depuis GitHub)
  gateway:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-your-username}/elibrary-gateway:latest
    container_name: elibrary-gateway
    platform: linux/arm64
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - catalog-service
      - auth-service
    restart: unless-stopped
    networks:
      - elibrary-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Catalog Service (pré-buildé depuis GitHub)
  catalog-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-your-username}/elibrary-catalog-service:latest
    container_name: elibrary-catalog
    platform: linux/arm64
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=CatalogDb;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=True;
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING:-redis:6379}
      - RabbitMQ__HostName=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__UserName=${RABBITMQ_USER:-guest}
      - RabbitMQ__Password=${RABBITMQ_PASS:-guest}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER:-eLibrary-API}
      - JwtSettings__Audience=${JWT_AUDIENCE:-eLibrary-Clients}
      - JwtSettings__ExpirationInMinutes=${JWT_EXPIRATION_MINUTES:-60}
      - GoogleBooksApi__ApiKey=${GOOGLE_BOOKS_API_KEY}
      - FeatureFlags__EnableRecommendations=${ENABLE_RECOMMENDATIONS:-true}
      - FeatureFlags__EnableRealTimeNotifications=${ENABLE_REAL_TIME_NOTIFICATIONS:-true}
      - FeatureFlags__EnableGoogleBooksEnrichment=${ENABLE_GOOGLE_BOOKS_ENRICHMENT:-true}
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - elibrary-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Auth Service (pré-buildé depuis GitHub)
  auth-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-your-username}/elibrary-auth-service:latest
    container_name: elibrary-auth
    platform: linux/arm64
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=AuthDb;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=True;
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING:-redis:6379}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER:-eLibrary-API}
      - JwtSettings__Audience=${JWT_AUDIENCE:-eLibrary-Clients}
      - JwtSettings__ExpirationInMinutes=${JWT_EXPIRATION_MINUTES:-60}
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - elibrary-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Importer Service (pré-buildé depuis GitHub)
  importer-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-your-username}/elibrary-importer-service:latest
    container_name: elibrary-importer
    platform: linux/arm64
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - RabbitMQ__HostName=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__UserName=${RABBITMQ_USER:-guest}
      - RabbitMQ__Password=${RABBITMQ_PASS:-guest}
      - GoogleBooksApi__ApiKey=${GOOGLE_BOOKS_API_KEY}
      - CatalogService__BaseUrl=http://catalog-service:80
    depends_on:
      rabbitmq:
        condition: service_healthy
      catalog-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - elibrary-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Recommender Service (pré-buildé depuis GitHub)
  recommender-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-your-username}/elibrary-recommender-service:latest
    container_name: elibrary-recommender
    platform: linux/arm64
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=RecommenderDb;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=True;
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING:-redis:6379}
      - RabbitMQ__HostName=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__UserName=${RABBITMQ_USER:-guest}
      - RabbitMQ__Password=${RABBITMQ_PASS:-guest}
      - CatalogService__BaseUrl=http://catalog-service:80
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - elibrary-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # React Frontend (pré-buildé depuis GitHub)
  frontend-react:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-your-username}/elibrary-frontend-react:latest
    container_name: elibrary-frontend-react
    platform: linux/arm64
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${API_GATEWAY_URL:-http://localhost:5000}
    depends_on:
      gateway:
        condition: service_started
    restart: unless-stopped
    networks:
      - elibrary-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Angular Frontend (pré-buildé depuis GitHub)
  frontend-angular:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-your-username}/elibrary-frontend-angular:latest
    container_name: elibrary-frontend-angular
    platform: linux/arm64
    ports:
      - "4200:80"
    environment:
      - NG_API_URL=${API_GATEWAY_URL:-http://localhost:5000}
    depends_on:
      gateway:
        condition: service_started
    restart: unless-stopped
    networks:
      - elibrary-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: elibrary-prometheus
    platform: linux/arm64
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
    restart: unless-stopped
    networks:
      - elibrary-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: elibrary-grafana
    platform: linux/arm64
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
    networks:
      - elibrary-network

  # Watchtower - Auto-update des conteneurs
  watchtower:
    image: containrrr/watchtower:latest
    container_name: elibrary-watchtower
    platform: linux/arm64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.docker/config.json:/config.json:ro
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
    restart: unless-stopped
    networks:
      - elibrary-network

networks:
  elibrary-network:
    driver: bridge

volumes:
  sqlserver-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:


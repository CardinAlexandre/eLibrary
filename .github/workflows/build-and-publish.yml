name: Build & Publish Docker Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/elibrary

jobs:
  build-backend:
    name: Build Backend Services
    runs-on: ubuntu-latest
    environment: eLibrary
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - gateway
          - catalog-service
          - auth-service
          - importer-service
          - recommender-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/arm64

  build-frontend-react:
    name: Build React Frontend
    runs-on: ubuntu-latest
    environment: eLibrary
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend-react
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/react
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend-angular:
    name: Build Angular Frontend
    runs-on: ubuntu-latest
    environment: eLibrary
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend-angular
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/angular
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-deployment:
    name: Notify Deployment Ready
    runs-on: ubuntu-latest
    environment: eLibrary
    needs: [build-backend, build-frontend-react, build-frontend-angular]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment ready notification
        run: |
          echo "üéâ All images built and published successfully!"
          echo ""
          echo "üì¶ Images available at:"
          echo "   - ghcr.io/${{ github.repository_owner }}/elibrary-gateway:latest"
          echo "   - ghcr.io/${{ github.repository_owner }}/elibrary-catalog-service:latest"
          echo "   - ghcr.io/${{ github.repository_owner }}/elibrary-auth-service:latest"
          echo "   - ghcr.io/${{ github.repository_owner }}/elibrary-importer-service:latest"
          echo "   - ghcr.io/${{ github.repository_owner }}/elibrary-recommender-service:latest"
          echo "   - ghcr.io/${{ github.repository_owner }}/elibrary-frontend-react:latest"
          echo "   - ghcr.io/${{ github.repository_owner }}/elibrary-frontend-angular:latest"
          echo ""
          echo "üçì Raspberry Pi will auto-update via Watchtower in 5 minutes"


# Docker Compose pour test local avec PostgreSQL
# Build les images localement

services:
  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: elibrary-postgres-test
    environment:
      - POSTGRES_USER=elibrary
      - POSTGRES_PASSWORD=${DB_PASSWORD:-eLibrary@2025!}
      - POSTGRES_DB=eLibraryDb
    ports:
      - "5432:5432"
    volumes:
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - elibrary-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elibrary"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: elibrary-redis-test
    ports:
      - "6379:6379"
    networks:
      - elibrary-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: elibrary-rabbitmq-test
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - elibrary-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Catalog Service
  catalog-service:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    container_name: elibrary-catalog-test
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=CatalogDb;Username=elibrary;Password=${DB_PASSWORD:-eLibrary@2025!}
      - ConnectionStrings__Redis=redis:6379
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - JwtSettings__Secret=${JWT_SECRET:-SuperSecretKeyForJWTTesting2025!}
      - JwtSettings__Issuer=eLibrary-API
      - JwtSettings__Audience=eLibrary-Clients
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - elibrary-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: elibrary-auth-test
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=AuthDb;Username=elibrary;Password=${DB_PASSWORD:-eLibrary@2025!}
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__Secret=${JWT_SECRET:-SuperSecretKeyForJWTTesting2025!}
      - JwtSettings__Issuer=eLibrary-API
      - JwtSettings__Audience=eLibrary-Clients
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - elibrary-network

  # Recommender Service
  recommender-service:
    build:
      context: ./services/recommender-service
      dockerfile: Dockerfile
    container_name: elibrary-recommender-test
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=RecommenderDb;Username=elibrary;Password=${DB_PASSWORD:-eLibrary@2025!}
      - ConnectionStrings__Redis=redis:6379
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - CatalogService__BaseUrl=http://catalog-service:80
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - elibrary-network

  # Importer Service
  importer-service:
    build:
      context: ./services/importer-service
      dockerfile: Dockerfile
    container_name: elibrary-importer-test
    ports:
      - "5004:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - GoogleBooksApi__ApiKey=${GOOGLE_BOOKS_API_KEY:-YOUR_API_KEY_HERE}
      - CatalogService__BaseUrl=http://catalog-service:80
    depends_on:
      rabbitmq:
        condition: service_healthy
      catalog-service:
        condition: service_started
    networks:
      - elibrary-network

  # Gateway Service
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: elibrary-gateway-test
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - JwtSettings__Secret=${JWT_SECRET:-SuperSecretKeyForJWTTesting2025!}
      - JwtSettings__Issuer=eLibrary-API
      - JwtSettings__Audience=eLibrary-Clients
    depends_on:
      - catalog-service
      - auth-service
    networks:
      - elibrary-network

  # React Frontend
  frontend-react:
    build:
      context: ./frontend/react
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=
    container_name: elibrary-frontend-react-test
    ports:
      - "3000:80"
    depends_on:
      - gateway
    networks:
      - elibrary-network

  # Angular Frontend
  frontend-angular:
    build:
      context: ./frontend/angular
      dockerfile: Dockerfile
      args:
        - NG_API_URL=
    container_name: elibrary-frontend-angular-test
    ports:
      - "4200:80"
    depends_on:
      - gateway
    networks:
      - elibrary-network

networks:
  elibrary-network:
    driver: bridge


// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecommenderService.Data;

#nullable disable

namespace RecommenderService.Migrations
{
    [DbContext(typeof(RecommenderDbContext))]
    [Migration("20251008212629_InitialCreatePostgres")]
    partial class InitialCreatePostgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RecommenderService.Domain.BookSimilarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SimilarBookId")
                        .HasColumnType("uuid");

                    b.Property<string>("SimilarityReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SimilarityScore")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SimilarityScore");

                    b.HasIndex("BookId", "SimilarBookId")
                        .IsUnique();

                    b.ToTable("BookSimilarities");
                });

            modelBuilder.Entity("RecommenderService.Domain.UserInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<DateTime>("InteractionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("InteractionDate");

                    b.HasIndex("UserId");

                    b.ToTable("UserInteractions");
                });
#pragma warning restore 612, 618
        }
    }
}
